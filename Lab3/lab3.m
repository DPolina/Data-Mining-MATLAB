clc
close all
clear all

% mean(x) - Вычисляет среднее значение массива.
% var(x) - Вычисляет дисперсию массива.
% chi2inv(p,df) - Находит обратную функцию распределения хи-квадрат 
%   p - вероятность, df - число степеней свободы.
% [V,D] = eig(A) - Находит собственные значения и векторы матрицы.
%   A: Квадратная матрица.
%   V: Матрица, столбцы которой являются собственными векторами A.
%   D: Диагональная матрица, диагональные элементы которой являются собственными значениями A.
% y = flipud(x) - Отражает массив по вертикали.
% y = fliplr(x) - Отражает массив по горизонтали.
% scatter(x,y) - Создает диаграмму рассеяния.

file = fopen('data6.txt');
X = fscanf(file, '%d', [8 inf])' % Объекты и их 8 признаков
fclose(file);

X_mat = mean(X) % Среднее значение массива по столбцам
srednekv_otkl = std(X); % Среднеквадратичное отклонение
N = size(X);
K = N(2);
N = N(1);

% Нормировка входных данных по столбцам (для устранения неоднородности
% матожидания)
% Матожидание становится нулевым во всех столбцах
X_norm = zeros(N, K);
for i = 1:N
    for j = 1:K
        X_norm(i,j) = (X(i,j) - X_mat(j))/srednekv_otkl(j);
    end;
end;

X_norm_ = mean(X_norm)
srednekv_otkl = std(X_norm)

% Матрица ковариации (КхК) совпадает с корреляционной засчет нормализации
R = (X_norm'*X_norm)/(N-1)

% Проверка матрицы корреляции (берётся верхний трегольник без диагонали) на
% отличие от единичной
d = 0;
for i = 1:K
    for j = (i+1):K
        d = d + (R(i,j))^2;
    end;
end;
d = d*N % > x_kv 
x_kv = chi2inv(0.95, K*(K-1)/2)

[A, L] = eig(R); 
A = fliplr(A);
% A - соб. векторы, L (lambda) - диагональная матрица с соб. значениями 

% Расположить по убыванию (отразить по горизонтали и вертикали)
L = flipud(L); 
L = fliplr(L);
Z = X_norm*A % Проекции объектов на гл. компоненты

sum_comp = sum(var(Z)) % Сумма выборочных дисперсий проекций объектов на главные компоненты
sum_prizn = sum(var(X_norm)) % Сумма выборочных дисперсий исходных признаков

otn_dol_razbr_j = var(Z) / sum_comp; % (3.7) - Отн. доля разброса, приходящаяся на j-ю главную компоненту

otn_dol_razbr_i = zeros(K,1); % (3.8) - Отн. доля разброса, приходящаяся на i первых компонент
   for i = 1:K
    otn_dol_razbr_i(i) = 0;
      for j = 1:i
        otn_dol_razbr_i(i) = otn_dol_razbr_i(i) + otn_dol_razbr_j(j);
      end
   end
otn_dol_razbr_i = otn_dol_razbr_i';

%otn_dol_razbr = otn_dol_razbr_j
otn_dol_razbr = otn_dol_razbr_i

% Относительная доля разброса для первых двух компонент
otn_dol_razbr_1_2 = otn_dol_razbr(1) + otn_dol_razbr(2); 

cov_matrix = cov(Z) % Матрица ковариации для проекций объектов на главные компоненты

% Размерность данных была 8, стала 2
% Первые две компоненты выбраны по принципу наибольшего собственного значения, 
% то есть наибольшей дисперсии
figure;
scatter(Z(:,1),Z(:,2), 35, '.', 'r');
title('Диаграмма рассеяния (для первых двух компонент)');
xlabel('Z1');
ylabel('Z2');
